#include <Vector3AndMatrix.h>
#include<Function.h>
#include <Novice.h>
#include<assert.h>
#define _USE_MATH_DEFINES
 Matrix4x4 Add(const Matrix4x4 m1, const Matrix4x4 m2)
{
	Matrix4x4 result;
	result.m[0][0] = m1.m[0][0] + m2.m[0][0];
	result.m[0][1] = m1.m[0][1] + m2.m[0][1];
	result.m[0][2] = m1.m[0][2] + m2.m[0][2];
	result.m[0][3] = m1.m[0][3] + m2.m[0][3];

	result.m[1][0] = m1.m[1][0] + m2.m[1][0];
	result.m[1][1] = m1.m[1][1] + m2.m[1][1];
	result.m[1][2] = m1.m[1][2] + m2.m[1][2];
	result.m[1][3] = m1.m[1][3] + m2.m[1][3];

	result.m[2][0] = m1.m[2][0] + m2.m[2][0];
	result.m[2][1] = m1.m[2][1] + m2.m[2][1];
	result.m[2][2] = m1.m[2][2] + m2.m[2][2];
	result.m[2][3] = m1.m[2][3] + m2.m[2][3];


	result.m[3][0] = m1.m[3][0] + m2.m[3][0];
	result.m[3][1] = m1.m[3][1] + m2.m[3][1];
	result.m[3][2] = m1.m[3][2] + m2.m[3][2];
	result.m[3][3] = m1.m[3][3] + m2.m[3][3];
	return result;
				
 }
 Matrix4x4 Sudtract(const Matrix4x4 m1, const Matrix4x4 m2) {
	Matrix4x4 result;		
	result.m[0][0] = m1.m[0][0] - m2.m[0][0];
	result.m[0][1] = m1.m[0][1] - m2.m[0][1];
	result.m[0][2] = m1.m[0][2] - m2.m[0][2];
	result.m[0][3] = m1.m[0][3] - m2.m[0][3];

	result.m[1][0] = m1.m[1][0] - m2.m[1][0];
	result.m[1][1] = m1.m[1][1] - m2.m[1][1];
	result.m[1][2] = m1.m[1][2] - m2.m[1][2];
	result.m[1][3] = m1.m[1][3] - m2.m[1][3];
	
	result.m[2][0] = m1.m[2][0] - m2.m[2][0];
	result.m[2][1] = m1.m[2][1] - m2.m[2][1];
	result.m[2][2] = m1.m[2][2] - m2.m[2][2];
	result.m[2][3] = m1.m[2][3] - m2.m[2][3];

	result.m[3][0] = m1.m[3][0] + m2.m[3][0];
	result.m[3][1] = m1.m[3][1] + m2.m[3][1];
	result.m[3][2] = m1.m[3][2] + m2.m[3][2];
	result.m[3][3] = m1.m[3][3] + m2.m[3][3];
	return result;
 }
 Matrix4x4 Multiply(const Matrix4x4 m1, const Matrix4x4 m2) {
	Matrix4x4 result;
	result.m[0][0] = m1.m[0][0] * m2.m[0][0] + m1.m[0][1] * m2.m[1][0] + m1.m[0][2] * m2.m[2][0] +
	                 m1.m[0][3] * m2.m[3][0];

	result.m[0][1] = m1.m[0][0] * m2.m[0][1] + m1.m[0][1] * m2.m[1][1] + m1.m[0][2] * m2.m[2][1] +
	                 m1.m[0][3] * m2.m[3][1];        

	result.m[0][2] = m1.m[0][0] * m2.m[0][2] + m1.m[0][1] * m2.m[1][2] + m1.m[0][2] * m2.m[2][2] +
	                 m1.m[0][3] * m2.m[3][2];

	result.m[0][3] = m1.m[0][0] * m2.m[0][3] + m1.m[0][1] * m2.m[1][3] + m1.m[0][2] * m2.m[2][3] +
	                 m1.m[0][3] * m2.m[3][3];
	                 

	result.m[1][0] = m1.m[1][0] * m2.m[0][0] + m1.m[1][1] * m2.m[1][0] + m1.m[1][2] * m2.m[2][0] +
	                 m1.m[1][3] * m2.m[3][0];

	result.m[1][1] = m1.m[1][0] * m2.m[0][1] + m1.m[1][1] * m2.m[1][1] + m1.m[1][2] * m2.m[2][1] +
	                 m1.m[1][3] * m2.m[3][1];

	result.m[1][2] = m1.m[1][0] * m2.m[0][2] + m1.m[1][1] * m2.m[1][2] + m1.m[1][2] * m2.m[2][2] +
	                 m1.m[1][3] * m2.m[3][2];

	result.m[1][3] = m1.m[1][0] * m2.m[0][3] + m1.m[1][1] * m2.m[1][3] + m1.m[1][2] * m2.m[2][3] +
	                 m1.m[1][3] * m2.m[3][3];

	result.m[2][0] = m1.m[2][0] * m2.m[0][0] + m1.m[2][1] * m2.m[1][0] + m1.m[2][2] * m2.m[2][0] +
	                 m1.m[2][3] * m2.m[3][0];

	result.m[2][1] = m1.m[2][0] * m2.m[0][1] + m1.m[2][1] * m2.m[1][1] + m1.m[2][2] * m2.m[2][1] +
	                 m1.m[2][3] * m2.m[3][1];

	result.m[2][2] = m1.m[2][0] * m2.m[0][2] + m1.m[2][1] * m2.m[1][2] + m1.m[2][2] * m2.m[2][2] +
	                 m1.m[2][3] * m2.m[3][2];

	result.m[2][3] = m1.m[2][0] * m2.m[0][3] + m1.m[2][1] * m2.m[1][3] + m1.m[2][2] * m2.m[2][3] +
	                 m1.m[2][3] * m2.m[3][3];

	result.m[3][0] = m1.m[3][0] * m2.m[0][0] + m1.m[3][1] * m2.m[1][0] + m1.m[3][2] * m2.m[2][0] +
	                 m1.m[3][3] * m2.m[3][0];

	result.m[3][1] = m1.m[3][0] * m2.m[0][1] + m1.m[3][1] * m2.m[1][1] + m1.m[3][2] * m2.m[2][1] +
	                 m1.m[3][3] * m2.m[3][1];

	result.m[3][2] = m1.m[3][0] * m2.m[0][2] + m1.m[3][1] * m2.m[1][2] + m1.m[3][2] * m2.m[2][2] +
	                 m1.m[3][3] * m2.m[3][2];

	result.m[3][3] = m1.m[3][0] * m2.m[0][3] + m1.m[3][1] * m2.m[1][3] + m1.m[3][2] * m2.m[2][3] +
	                 m1.m[3][3] * m2.m[3][3];
	return result;
 }
 Matrix4x4 inVerseM1(const Matrix4x4 m1) {
	Matrix4x4 result;
	float determinant = m1.m[0][0] * m1.m[1][1] * m1.m[2][2] * m1.m[3][3] +
	                    m1.m[0][0] * m1.m[1][2] * m1.m[2][3] * m1.m[3][1] +
	                    m1.m[0][0] * m1.m[1][3] * m1.m[2][1] * m1.m[3][2] -

	                    m1.m[0][0] * m1.m[1][3] * m1.m[2][2] * m1.m[3][1] -
	                    m1.m[0][0] * m1.m[1][2] * m1.m[2][1] * m1.m[3][3] -
	                    m1.m[0][0] * m1.m[1][1] * m1.m[2][3] * m1.m[3][2] - 

	                    m1.m[0][1] * m1.m[1][0] * m1.m[2][2] * m1.m[3][3] -
	                    m1.m[0][2] * m1.m[1][0] * m1.m[2][3] * m1.m[3][1] -
	                    m1.m[0][3] * m1.m[1][0] * m1.m[2][1] * m1.m[3][2] +

	                    m1.m[0][3] * m1.m[1][0] * m1.m[2][2] * m1.m[3][1] +
	                    m1.m[0][2] * m1.m[1][0] * m1.m[2][1] * m1.m[3][3] +
	                    m1.m[0][1] * m1.m[1][0] * m1.m[2][3] * m1.m[3][2] +

	                    m1.m[0][1] * m1.m[1][2] * m1.m[2][0] * m1.m[3][3] +
	                    m1.m[0][2] * m1.m[1][3] * m1.m[2][0] * m1.m[3][1] +
	                    m1.m[0][3] * m1.m[1][1] * m1.m[2][0] * m1.m[3][2] -

	                    m1.m[0][3] * m1.m[1][2] * m1.m[2][0] * m1.m[3][1] -
	                    m1.m[0][2] * m1.m[1][1] * m1.m[2][0] * m1.m[3][3] -
	                    m1.m[0][1] * m1.m[1][3] * m1.m[2][0] * m1.m[3][2] -

	                    m1.m[0][1] * m1.m[1][2] * m1.m[2][3] * m1.m[3][0] -
	                    m1.m[0][2] * m1.m[1][3] * m1.m[2][1] * m1.m[3][0] -
	                    m1.m[0][3] * m1.m[1][1] * m1.m[2][2] * m1.m[3][0] +

	                    m1.m[0][3] * m1.m[1][2] * m1.m[2][1] * m1.m[3][0] +
	                    m1.m[0][2] * m1.m[1][1] * m1.m[2][3] * m1.m[3][0] +
	                    m1.m[0][1] * m1.m[1][3] * m1.m[2][2] * m1.m[3][0];
		                
	                  assert(determinant != 0.0f);
	                  float determinantRecp = 1.0f / determinant;
	                  result.m[0][0] =
	                      (m1.m[1][1] * m1.m[2][2] * m1.m[3][3] +
	                       m1.m[1][2] * m1.m[2][3] * m1.m[3][1] +
	                       m1.m[1][3] * m1.m[2][1] * m1.m[3][2] -

	                       m1.m[1][3] * m1.m[2][2] * m1.m[3][1] -
	                       m1.m[1][2] * m1.m[2][1] * m1.m[3][3] -
	                       m1.m[1][1] * m1.m[2][3] * m1.m[3][2]) * determinantRecp;
	                  result.m[0][1] =
	                      (-m1.m[0][1] * m1.m[2][2] * m1.m[3][3] -
	                       m1.m[0][2] * m1.m[2][3] * m1.m[3][1] -
	                       m1.m[0][3] * m1.m[2][1] * m1.m[3][2] +

	                       m1.m[0][3] * m1.m[2][2] * m1.m[3][1] +
	                       m1.m[0][2] * m1.m[2][1] * m1.m[3][3] +
	                       m1.m[0][1] * m1.m[2][3] * m1.m[3][2]) * determinantRecp;

					  result.m[0][2] = 
						  (m1.m[0][1] * m1.m[1][2] * m1.m[3][3] +
	                       m1.m[0][2] * m1.m[1][3] * m1.m[3][1] +
	                       m1.m[0][3] * m1.m[1][1] * m1.m[3][2] -

	                       m1.m[0][3] * m1.m[1][2] * m1.m[3][1] -
	                       m1.m[0][2] * m1.m[1][1] * m1.m[3][3] -
	                       m1.m[0][1] * m1.m[1][3] * m1.m[3][2]) * determinantRecp;

                      result.m[0][3] = 
						  (- m1.m[0][1] * m1.m[1][2] * m1.m[2][3] -
	                       m1.m[0][2] * m1.m[1][3] * m1.m[2][1] -
	                       m1.m[0][3] * m1.m[1][1] * m1.m[2][2] +

	                       m1.m[0][3] * m1.m[1][2] * m1.m[2][1] +
	                       m1.m[0][2] * m1.m[1][1] * m1.m[2][3] +
	                       m1.m[0][1] * m1.m[1][3] * m1.m[2][2]) * determinantRecp;

	                 result.m[1][0] = 
						 (- m1.m[1][0] * m1.m[2][2] * m1.m[3][3] -
	                      m1.m[1][2] * m1.m[2][3] * m1.m[3][0] -
	                      m1.m[1][3] * m1.m[2][0] * m1.m[3][2] +

	                      m1.m[1][3] * m1.m[2][2] * m1.m[3][0] +
	                      m1.m[1][2] * m1.m[2][0] * m1.m[3][3] +
	                      m1.m[1][0] * m1.m[2][3] * m1.m[3][2]) * determinantRecp;

	                  result.m[1][1] = 
						  (m1.m[0][0] * m1.m[2][2] * m1.m[3][3] +
	                       m1.m[0][2] * m1.m[2][3] * m1.m[3][0] +
	                       m1.m[0][3] * m1.m[2][0] * m1.m[3][2] -

	                       m1.m[0][3] * m1.m[2][2] * m1.m[3][0] -
	                       m1.m[0][2] * m1.m[2][0] * m1.m[3][3] -
	                       m1.m[0][0] * m1.m[2][3] * m1.m[3][2]) * determinantRecp;

					    result.m[1][2] = 
							(- m1.m[0][0] * m1.m[1][2] * m1.m[3][3] -
	                         m1.m[0][2] * m1.m[1][3] * m1.m[3][0] -
	                         m1.m[0][3] * m1.m[1][0] * m1.m[3][2] +

	                         m1.m[0][3] * m1.m[1][2] * m1.m[3][0] +
	                         m1.m[0][2] * m1.m[1][0] * m1.m[3][3] +
	                         m1.m[0][0] * m1.m[1][3] * m1.m[3][2]) * determinantRecp;

						   result.m[1][3] = 
							   (m1.m[0][0] * m1.m[1][2] * m1.m[2][3] +
	                            m1.m[0][2] * m1.m[1][3] * m1.m[2][0] +
	                            m1.m[0][3] * m1.m[1][0] * m1.m[2][2] -

	                            m1.m[0][3] * m1.m[1][2] * m1.m[2][0] -
	                            m1.m[0][2] * m1.m[1][0] * m1.m[2][3] -
	                            m1.m[0][0] * m1.m[1][3] * m1.m[2][2]) * determinantRecp;

						     result.m[2][0] = 
								 (m1.m[1][0] * m1.m[2][1] * m1.m[3][3] +
	                              m1.m[1][1] * m1.m[2][3] * m1.m[3][0] +
	                              m1.m[1][3] * m1.m[2][0] * m1.m[3][1] -

	                              m1.m[1][3] * m1.m[2][1] * m1.m[3][0] -
	                              m1.m[1][1] * m1.m[2][0] * m1.m[3][3] -
	                              m1.m[1][0] * m1.m[2][3] * m1.m[3][1]) * determinantRecp;

							  result.m[2][1] = 
								  (-m1.m[0][0] * m1.m[2][1] * m1.m[3][3] -
	                                m1.m[0][1] * m1.m[2][3] * m1.m[3][0] -
	                                m1.m[0][3] * m1.m[2][0] * m1.m[3][1] +

	                                m1.m[0][3] * m1.m[2][1] * m1.m[3][0] +
	                                m1.m[0][1] * m1.m[2][0] * m1.m[3][3] +
	                                m1.m[0][0] * m1.m[2][3] * m1.m[3][1]) * determinantRecp;

							  result.m[2][2] = (m1.m[0][0] * m1.m[1][1] * m1.m[3][3] +
	                                            m1.m[0][1] * m1.m[1][3] * m1.m[3][0] +
	                                            m1.m[0][3] * m1.m[1][0] * m1.m[3][1] -

	                                            m1.m[0][3] * m1.m[1][1] * m1.m[3][0] -
	                                            m1.m[0][1] * m1.m[1][0] * m1.m[3][3] -
	                                            m1.m[0][0] * m1.m[1][3] * m1.m[3][1]) * determinantRecp;

							  result.m[2][3] = (-m1.m[0][0] * m1.m[1][1] * m1.m[2][3] -
	                                            m1.m[0][1] * m1.m[1][3] * m1.m[2][0] -
	                                            m1.m[0][3] * m1.m[1][0] * m1.m[2][1] +

	                                            m1.m[0][3] * m1.m[1][1] * m1.m[2][0] +
	                                            m1.m[0][1] * m1.m[1][0] * m1.m[2][3] +
	                                            m1.m[0][0] * m1.m[1][3] * m1.m[2][1]) * determinantRecp;

							    result.m[3][0] = (-m1.m[1][0] * m1.m[2][1] * m1.m[3][2] -
	                                            m1.m[1][1] * m1.m[2][2] * m1.m[3][0] -
	                                            m1.m[1][2] * m1.m[2][0] * m1.m[3][1] +

	                                            m1.m[1][2] * m1.m[2][1] * m1.m[3][0] +
	                                            m1.m[1][1] * m1.m[2][0] * m1.m[3][2] +
	                                            m1.m[1][0] * m1.m[2][2] * m1.m[3][1]) * determinantRecp;

	                          result.m[3][1] = (m1.m[0][0] * m1.m[2][1] * m1.m[3][2] +
	                                            m1.m[0][1] * m1.m[2][2] * m1.m[3][0] +
	                                            m1.m[0][2] * m1.m[2][0] * m1.m[3][1] -

	                                            m1.m[0][2] * m1.m[2][1] * m1.m[3][0] -
	                                            m1.m[0][1] * m1.m[2][0] * m1.m[3][2] -
	                                            m1.m[0][0] * m1.m[2][2] * m1.m[3][1]) * determinantRecp;

							  result.m[3][2] = (-m1.m[0][0] * m1.m[1][1] * m1.m[3][2] -
	                                            m1.m[0][1] * m1.m[1][2] * m1.m[3][0] -
	                                            m1.m[0][2] * m1.m[1][0] * m1.m[3][1] +

	                                            m1.m[0][2] * m1.m[1][1] * m1.m[3][0] +
	                                            m1.m[0][1] * m1.m[1][0] * m1.m[3][2] +
	                                            m1.m[0][0] * m1.m[1][2] * m1.m[3][1]) * determinantRecp;

							  result.m[3][3] = (m1.m[0][0] * m1.m[1][1] * m1.m[2][2] +
	                                            m1.m[0][1] * m1.m[1][2] * m1.m[2][0] +
	                                            m1.m[0][2] * m1.m[1][0] * m1.m[2][1] -

	                                            m1.m[0][2] * m1.m[1][1] * m1.m[2][0] -
	                                            m1.m[0][1] * m1.m[1][0] * m1.m[2][2] -
	                                            m1.m[0][0] * m1.m[1][2] * m1.m[2][1]) * determinantRecp;
	return result;
 }

 Matrix4x4 inVerseM2(const Matrix4x4 m2) {
	Matrix4x4 result;
	float determinant = m2.m[0][0] * m2.m[1][1] * m2.m[2][2] * m2.m[3][3] +
	                    m2.m[0][0] * m2.m[1][2] * m2.m[2][3] * m2.m[3][1] +
	                    m2.m[0][0] * m2.m[1][3] * m2.m[2][1] * m2.m[3][2] -
									  
	                    m2.m[0][0] * m2.m[1][3] * m2.m[2][2] * m2.m[3][1] -
	                    m2.m[0][0] * m2.m[1][2] * m2.m[2][1] * m2.m[3][3] -
	                    m2.m[0][0] * m2.m[1][1] * m2.m[2][3] * m2.m[3][2] -
									  
	                    m2.m[0][1] * m2.m[1][0] * m2.m[2][2] * m2.m[3][3] -
	                    m2.m[0][2] * m2.m[1][0] * m2.m[2][3] * m2.m[3][1] -
	                    m2.m[0][3] * m2.m[1][0] * m2.m[2][1] * m2.m[3][2] +
									  
	                    m2.m[0][3] * m2.m[1][0] * m2.m[2][2] * m2.m[3][1] +
	                    m2.m[0][2] * m2.m[1][0] * m2.m[2][1] * m2.m[3][3] +
	                    m2.m[0][1] * m2.m[1][0] * m2.m[2][3] * m2.m[3][2] +
									  
	                    m2.m[0][1] * m2.m[1][2] * m2.m[2][0] * m2.m[3][3] +
	                    m2.m[0][2] * m2.m[1][3] * m2.m[2][0] * m2.m[3][1] +
	                    m2.m[0][3] * m2.m[1][1] * m2.m[2][0] * m2.m[3][2] -
									  
	                    m2.m[0][3] * m2.m[1][2] * m2.m[2][0] * m2.m[3][1] -
	                    m2.m[0][2] * m2.m[1][1] * m2.m[2][0] * m2.m[3][3] -
	                    m2.m[0][1] * m2.m[1][3] * m2.m[2][0] * m2.m[3][2] -
									  
	                    m2.m[0][1] * m2.m[1][2] * m2.m[2][3] * m2.m[3][0] -
	                    m2.m[0][2] * m2.m[1][3] * m2.m[2][1] * m2.m[3][0] -
	                    m2.m[0][3] * m2.m[1][1] * m2.m[2][2] * m2.m[3][0] +
									  
	                    m2.m[0][2] * m2.m[1][1] * m2.m[2][3] * m2.m[3][0] +
	                    m2.m[0][3] * m2.m[1][2] * m2.m[2][1] * m2.m[3][0] +
	                    m2.m[0][1] * m2.m[1][3] * m2.m[2][2] * m2.m[3][0];
	assert(determinant != 0.0f);
	float determinantRecp = 1.0f / determinant;
	result.m[0][0] = (m2.m[1][1] * m2.m[2][2] * m2.m[3][3] + 
		              m2.m[1][2] * m2.m[2][3] * m2.m[3][1] +
	                  m2.m[1][3] * m2.m[2][1] * m2.m[3][2] -
					   
	                  m2.m[1][3] * m2.m[2][2] * m2.m[3][1] - 
		              m2.m[1][2] * m2.m[2][1] * m2.m[3][3] -
	                  m2.m[1][1] * m2.m[2][3] * m2.m[3][2]) * determinantRecp;
   					   
   result.m[0][1] = (-m2.m[0][1] * m2.m[2][2] * m2.m[3][3] - 
		              m2.m[0][2] * m2.m[2][3] * m2.m[3][1] -
	                  m2.m[0][3] * m2.m[2][1] * m2.m[3][2] +
					   
	                  m2.m[0][3] * m2.m[2][2] * m2.m[3][1] + 
		              m2.m[0][2] * m2.m[2][1] * m2.m[3][3] +
	                  m2.m[0][1] * m2.m[2][3] * m2.m[3][2]) * determinantRecp;
					   
	result.m[0][2] = (m2.m[0][1] * m2.m[1][2] * m2.m[3][3] + 
		              m2.m[0][2] * m2.m[1][3] * m2.m[3][1] +
	                  m2.m[0][3] * m2.m[1][1] * m2.m[3][2] -
					   
	                  m2.m[0][3] * m2.m[1][2] * m2.m[3][1] - 
		              m2.m[0][2] * m2.m[1][1] * m2.m[3][3] -
	                  m2.m[0][1] * m2.m[1][3] * m2.m[3][2]) * determinantRecp;
					   
   result.m[0][3] = (-m2.m[0][1] * m2.m[1][2] * m2.m[2][3] - 
	                  m2.m[0][2] * m2.m[1][3] * m2.m[2][1] -
	                  m2.m[0][3] * m2.m[1][1] * m2.m[2][2] +
					   
	                  m2.m[0][3] * m2.m[1][2] * m2.m[2][1] + 
	                  m2.m[0][2] * m2.m[1][1] * m2.m[2][3] +
	                  m2.m[0][1] * m2.m[1][3] * m2.m[2][2]) * determinantRecp;
					   
   result.m[1][0] = (-m2.m[1][0] * m2.m[2][2] * m2.m[3][3] - 
		              m2.m[1][2] * m2.m[2][3] * m2.m[3][0] -
	                  m2.m[1][3] * m2.m[2][0] * m2.m[3][2] +
					   
	                  m2.m[1][3] * m2.m[2][2] * m2.m[3][0] + 
	                  m2.m[1][2] * m2.m[2][0] * m2.m[3][3] +
	                  m2.m[1][0] * m2.m[2][3] * m2.m[3][2]) * determinantRecp;
					   
	result.m[1][1] = (m2.m[0][0] * m2.m[2][2] * m2.m[3][3] + 
		              m2.m[0][2] * m2.m[2][3] * m2.m[3][0] +
	                  m2.m[0][3] * m2.m[2][0] * m2.m[3][2] -
					   
	                  m2.m[0][3] * m2.m[2][2] * m2.m[3][0] -
		              m2.m[0][2] * m2.m[2][0] * m2.m[3][3] -
	                  m2.m[0][0] * m2.m[2][3] * m2.m[3][2]) * determinantRecp;
					   
   result.m[1][2] = (-m2.m[0][0] * m2.m[1][2] * m2.m[3][3] -
		              m2.m[0][2] * m2.m[1][3] * m2.m[3][0] -
	                  m2.m[0][3] * m2.m[1][0] * m2.m[3][2] +
					   
	                  m2.m[0][3] * m2.m[1][2] * m2.m[3][0] + 
	                  m2.m[0][2] * m2.m[1][0] * m2.m[3][3] +
	                  m2.m[0][0] * m2.m[1][3] * m2.m[3][2]) * determinantRecp;
					   
	result.m[1][3] = (m2.m[0][0] * m2.m[1][2] * m2.m[2][3] + 
		              m2.m[0][2] * m2.m[1][3] * m2.m[2][0] +
	                  m2.m[0][3] * m2.m[1][0] * m2.m[2][2] -
					   
	                  m2.m[0][3] * m2.m[1][2] * m2.m[2][0] - 
		              m2.m[0][2] * m2.m[1][0] * m2.m[2][3] -
	                  m2.m[0][0] * m2.m[1][3] * m2.m[2][2]) * determinantRecp;
					   
	result.m[2][0] = (m2.m[1][0] * m2.m[2][1] * m2.m[3][3] + 
		              m2.m[1][1] * m2.m[2][3] * m2.m[3][0] +
	                  m2.m[1][3] * m2.m[2][0] * m2.m[3][1] -
					   
	                  m2.m[1][3] * m2.m[2][1] * m2.m[3][0] - 
		              m2.m[1][1] * m2.m[2][0] * m2.m[3][3] -
	                  m2.m[1][0] * m2.m[2][3] * m2.m[3][1]) * determinantRecp;
					   
   result.m[2][1] = (-m2.m[0][0] * m2.m[2][1] * m2.m[3][3] - 
	   	              m2.m[0][1] * m2.m[2][3] * m2.m[3][0] -
	                  m2.m[0][3] * m2.m[2][0] * m2.m[3][1] +
					   
	                  m2.m[0][3] * m2.m[2][1] * m2.m[3][0] + 
	                  m2.m[0][1] * m2.m[2][0] * m2.m[3][3] +
	                  m2.m[0][0] * m2.m[2][3] * m2.m[3][1]) * determinantRecp;
					   
	result.m[2][2] = (m2.m[0][0] * m2.m[1][1] * m2.m[3][3] + 
		              m2.m[0][1] * m2.m[1][3] * m2.m[3][0] +
	                  m2.m[0][3] * m2.m[1][0] * m2.m[3][1] -
					   
	                  m2.m[0][3] * m2.m[1][1] * m2.m[3][0] - 
		              m2.m[0][1] * m2.m[1][0] * m2.m[3][3] -
	                  m2.m[0][0] * m2.m[1][3] * m2.m[3][1]) * determinantRecp;
					   
   result.m[2][3] = (-m2.m[0][0] * m2.m[1][1] * m2.m[2][3] - 
		              m2.m[0][1] * m2.m[1][3] * m2.m[2][0] -
	                  m2.m[0][3] * m2.m[1][0] * m2.m[2][1] +
					   
	                  m2.m[0][3] * m2.m[1][1] * m2.m[2][0] + 
	                  m2.m[0][1] * m2.m[1][0] * m2.m[2][3] +
	                  m2.m[0][0] * m2.m[1][3] * m2.m[2][1]) *determinantRecp;
					   
   result.m[3][0] = (-m2.m[1][0] * m2.m[2][1] * m2.m[3][2] -
		              m2.m[1][1] * m2.m[2][2] * m2.m[3][0] -
	                  m2.m[1][2] * m2.m[2][0] * m2.m[3][1] +
					   
	                  m2.m[1][2] * m2.m[2][1] * m2.m[3][0] + 
	                  m2.m[1][1] * m2.m[2][0] * m2.m[3][2] +
	                  m2.m[1][0] * m2.m[2][2] * m2.m[3][1]) * determinantRecp;
					   
	result.m[3][1] = (m2.m[0][0] * m2.m[2][1] * m2.m[3][2] + 
		              m2.m[0][1] * m2.m[2][2] * m2.m[3][0] +
	                  m2.m[0][2] * m2.m[2][0] * m2.m[3][1] -
					   
	                  m2.m[0][2] * m2.m[2][1] * m2.m[3][0] - 
		              m2.m[0][1] * m2.m[2][0] * m2.m[3][2] -
	                  m2.m[0][0] * m2.m[2][2] * m2.m[3][1]) * determinantRecp;
					   
   result.m[3][2] = (-m2.m[0][0] * m2.m[1][1] * m2.m[3][2] - 
		              m2.m[0][1] * m2.m[1][2] * m2.m[3][0] -
	                  m2.m[0][2] * m2.m[1][0] * m2.m[3][1] +
					   
	                  m2.m[0][2] * m2.m[1][1] * m2.m[3][0] + 
	                  m2.m[0][1] * m2.m[1][0] * m2.m[3][2] +
	                  m2.m[0][0] * m2.m[1][2] * m2.m[3][1]) * determinantRecp;
					   
	result.m[3][3] = (m2.m[0][0] * m2.m[1][1] * m2.m[2][2] + 
		              m2.m[0][1] * m2.m[1][2] * m2.m[2][0] +
	                  m2.m[0][2] * m2.m[1][0] * m2.m[2][1] -
					   
	                  m2.m[0][2] * m2.m[1][1] * m2.m[2][0] - 
		              m2.m[0][1] * m2.m[1][0] * m2.m[2][2] -
	                  m2.m[0][0] * m2.m[1][2] * m2.m[2][1]) * determinantRecp;
	return result;
 }
 Matrix4x4 transposeM1(const Matrix4x4 m1) 
 {
	Matrix4x4 result;
	result.m[0][0] = m1.m[0][0];
	result.m[0][1] = m1.m[1][0];
	result.m[0][2] = m1.m[2][0];
	result.m[0][3] = m1.m[3][0];

	result.m[1][0] = m1.m[0][1];
	result.m[1][1] = m1.m[1][1];
	result.m[1][2] = m1.m[2][1];
	result.m[1][3] = m1.m[3][1];

	result.m[2][0] = m1.m[0][2];
	result.m[2][1] = m1.m[1][2];
	result.m[2][2] = m1.m[2][2];
	result.m[2][3] = m1.m[3][2];

	result.m[3][0] = m1.m[0][3];
	result.m[3][1] = m1.m[1][3];
	result.m[3][2] = m1.m[2][3];
	result.m[3][3] = m1.m[3][3];
	return result;
 }
 Matrix4x4 transposeM2(const Matrix4x4 m2) 
 {
	Matrix4x4 result;
	result.m[0][0] = m2.m[0][0];
	result.m[0][1] = m2.m[1][0];
	result.m[0][2] = m2.m[2][0];
	result.m[0][3] = m2.m[3][0];

	result.m[1][0] = m2.m[0][1];
	result.m[1][1] = m2.m[1][1];
	result.m[1][2] = m2.m[2][1];
	result.m[1][3] = m2.m[3][1];

	result.m[2][0] = m2.m[0][2];
	result.m[2][1] = m2.m[1][2];
	result.m[2][2] = m2.m[2][2];
	result.m[2][3] = m2.m[3][2];

	result.m[3][0] = m2.m[0][3];
	result.m[3][1] = m2.m[1][3];
	result.m[3][2] = m2.m[2][3];
	result.m[3][3] = m2.m[3][3];
	return result;
 }
 Matrix4x4 MakeIdentity4x4(const Matrix4x4)
 {
	Matrix4x4 result;
	result.m[0][0] = 1;
	result.m[0][1] = 0;
	result.m[0][2] = 0;
	result.m[0][3] = 0;

	result.m[1][0] = 0;
	result.m[1][1] = 1;
	result.m[1][2] = 0;
	result.m[1][3] = 0;

	result.m[2][0] = 0;
	result.m[2][1] = 0;
	result.m[2][2] = 1;
	result.m[2][3] = 0;

	result.m[3][0] = 0;
	result.m[3][1] = 0;
	result.m[3][2] = 0;
	result.m[3][3] = 1;
	return result;
 }